// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1-issuer.proto

package apiv1_issuer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IssuerService_MakeSDJWT_FullMethodName = "/v1.issuer.IssuerService/MakeSDJWT"
	IssuerService_JWKS_FullMethodName      = "/v1.issuer.IssuerService/JWKS"
)

// IssuerServiceClient is the client API for IssuerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssuerServiceClient interface {
	MakeSDJWT(ctx context.Context, in *MakeSDJWTRequest, opts ...grpc.CallOption) (*MakeSDJWTReply, error)
	JWKS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JwksReply, error)
}

type issuerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuerServiceClient(cc grpc.ClientConnInterface) IssuerServiceClient {
	return &issuerServiceClient{cc}
}

func (c *issuerServiceClient) MakeSDJWT(ctx context.Context, in *MakeSDJWTRequest, opts ...grpc.CallOption) (*MakeSDJWTReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeSDJWTReply)
	err := c.cc.Invoke(ctx, IssuerService_MakeSDJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) JWKS(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JwksReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JwksReply)
	err := c.cc.Invoke(ctx, IssuerService_JWKS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServiceServer is the server API for IssuerService service.
// All implementations must embed UnimplementedIssuerServiceServer
// for forward compatibility.
type IssuerServiceServer interface {
	MakeSDJWT(context.Context, *MakeSDJWTRequest) (*MakeSDJWTReply, error)
	JWKS(context.Context, *Empty) (*JwksReply, error)
	mustEmbedUnimplementedIssuerServiceServer()
}

// UnimplementedIssuerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIssuerServiceServer struct{}

func (UnimplementedIssuerServiceServer) MakeSDJWT(context.Context, *MakeSDJWTRequest) (*MakeSDJWTReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeSDJWT not implemented")
}
func (UnimplementedIssuerServiceServer) JWKS(context.Context, *Empty) (*JwksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWKS not implemented")
}
func (UnimplementedIssuerServiceServer) mustEmbedUnimplementedIssuerServiceServer() {}
func (UnimplementedIssuerServiceServer) testEmbeddedByValue()                       {}

// UnsafeIssuerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssuerServiceServer will
// result in compilation errors.
type UnsafeIssuerServiceServer interface {
	mustEmbedUnimplementedIssuerServiceServer()
}

func RegisterIssuerServiceServer(s grpc.ServiceRegistrar, srv IssuerServiceServer) {
	// If the following call pancis, it indicates UnimplementedIssuerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IssuerService_ServiceDesc, srv)
}

func _IssuerService_MakeSDJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeSDJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).MakeSDJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuerService_MakeSDJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).MakeSDJWT(ctx, req.(*MakeSDJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_JWKS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).JWKS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssuerService_JWKS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).JWKS(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IssuerService_ServiceDesc is the grpc.ServiceDesc for IssuerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssuerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.issuer.IssuerService",
	HandlerType: (*IssuerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeSDJWT",
			Handler:    _IssuerService_MakeSDJWT_Handler,
		},
		{
			MethodName: "JWKS",
			Handler:    _IssuerService_JWKS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1-issuer.proto",
}
